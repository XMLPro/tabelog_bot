# generated by nekonoha
# coding: utf-8

from slackbot.bot import respond_to  # @bot_name : で反応するデコーダ
from slackbot.bot import listen_to  # チャネル内発言で反応するデコーダ
from slackbot.bot import default_reply  # 該当する応答がない場合に反応するデコーダ

import re
import random
from datetime import datetime


# @respond_to('string')     bot宛のメッセージ
#                           stringは正規表現が可能 「r'string'」
# @listen_to('string')      チャンネル内のbot宛以外の投稿
#                           @bot_name: では反応しないことに注意
#                           他の人へのメンションでは反応する
#                           正規表現可能
# @default_reply()          DEFAULT_REPLY と同じ働き
#                           正規表現を指定すると、他のデコーダにヒットせず、
#                           正規表現にマッチするときに反応
#                           ・・・なのだが、正規表現を指定するとエラーになる？

# message.reply('string')   @発言者名: string でメッセージを送信
# message.send('string')    string を送信
# message.react('icon_emoji')  発言者のメッセージにリアクション(スタンプ)する
#                               文字列中に':'はいらない


@default_reply()
def default_func(message):
    message.reply("テスト中")


@listen_to(r"http://.+|https://.+")
def listen_func(message):
    # TODO: ここでURLをどうにかする
    # とりあえずテキストを読み込んでURLっぽい部分をパース
    texts = re.split("[ \t\n\r]", message.body['text'])
    urls = []
    for text in texts:
        url = re.findall("<.+>", text)
        urls.append(re.sub("[<>]", "", str(url)))
    urls = list(set(urls))

    # 検出メッセージ
    rep = "以下のURLを検出しました \n"
    for url in urls:
        rep += url + "\n"
    rep += "食べログBOTテスト"

    message.send(rep)
    message.react("uketome")


@respond_to(r"ヘルプ|help|へるぷ")
def mention_func(message):
    message.reply("HTTP,HTTPSがついたやつをとりあえず取得したい")
